{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCCseC7qLgQHx9aYsoaga_4qjWA27whvFc\",\n  authDomain: \"movie-rec-67232.firebaseapp.com\",\n  projectId: \"movie-rec-67232\",\n  storageBucket: \"movie-rec-67232.appspot.com\",\n  messagingSenderId: \"640850592368\",\n  appId: \"1:640850592368:web:506c6d7cc202fbe91eaab5\"\n};\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logout = () => {\n  signOut(auth);\n};\nexport { auth, db, signInWithGoogle, logInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordReset, logout };\n\n// // Import the functions you need from the SDKs you need\n// import { initializeApp } from \"firebase/app\";\n// // TODO: Add SDKs for Firebase products that you want to use\n// // https://firebase.google.com/docs/web/setup#available-libraries\n\n// // Your web app's Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyCCseC7qLgQHx9aYsoaga_4qjWA27whvFc\",\n//   authDomain: \"movie-rec-67232.firebaseapp.com\",\n//   projectId: \"movie-rec-67232\",\n//   storageBucket: \"movie-rec-67232.appspot.com\",\n//   messagingSenderId: \"640850592368\",\n//   appId: \"1:640850592368:web:506c6d7cc202fbe91eaab5\"\n// };\n\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","db","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","err","console","error","alert","message","logInWithEmailAndPassword","password","registerWithEmailAndPassword","sendPasswordReset","logout"],"sources":["C:/Сайты/react/music-project/src/pages/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n\r\nimport {\r\n  GoogleAuthProvider,\r\n  getAuth,\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  signOut,\r\n} from \"firebase/auth\";\r\n\r\nimport {\r\n  getFirestore,\r\n  query,\r\n  getDocs,\r\n  collection,\r\n  where,\r\n  addDoc,\r\n} from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCCseC7qLgQHx9aYsoaga_4qjWA27whvFc\",\r\n  authDomain: \"movie-rec-67232.firebaseapp.com\",\r\n  projectId: \"movie-rec-67232\",\r\n  storageBucket: \"movie-rec-67232.appspot.com\",\r\n  messagingSenderId: \"640850592368\",\r\n  appId: \"1:640850592368:web:506c6d7cc202fbe91eaab5\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst googleProvider = new GoogleAuthProvider();\r\nconst signInWithGoogle = async () => {\r\n  try {\r\n    const res = await signInWithPopup(auth, googleProvider);\r\n    const user = res.user;\r\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\r\n    const docs = await getDocs(q);\r\n    if (docs.docs.length === 0) {\r\n      await addDoc(collection(db, \"users\"), {\r\n        uid: user.uid,\r\n        name: user.displayName,\r\n        authProvider: \"google\",\r\n        email: user.email,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst logInWithEmailAndPassword = async (email, password) => {\r\n  try {\r\n    await signInWithEmailAndPassword(auth, email, password);\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst registerWithEmailAndPassword = async (name, email, password) => {\r\n  try {\r\n    const res = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = res.user;\r\n    await addDoc(collection(db, \"users\"), {\r\n      uid: user.uid,\r\n      name,\r\n      authProvider: \"local\",\r\n      email,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\n\r\nconst sendPasswordReset = async (email) => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n    alert(\"Password reset link sent!\");\r\n  } catch (err) {\r\n    console.error(err);\r\n    alert(err.message);\r\n  }\r\n};\r\nconst logout = () => {\r\n  signOut(auth);\r\n};\r\n\r\nexport {\r\n  auth,\r\n  db,\r\n  signInWithGoogle,\r\n  logInWithEmailAndPassword,\r\n  registerWithEmailAndPassword,\r\n  sendPasswordReset,\r\n  logout,\r\n};\r\n\r\n// // Import the functions you need from the SDKs you need\r\n// import { initializeApp } from \"firebase/app\";\r\n// // TODO: Add SDKs for Firebase products that you want to use\r\n// // https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// // Your web app's Firebase configuration\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyCCseC7qLgQHx9aYsoaga_4qjWA27whvFc\",\r\n//   authDomain: \"movie-rec-67232.firebaseapp.com\",\r\n//   projectId: \"movie-rec-67232\",\r\n//   storageBucket: \"movie-rec-67232.appspot.com\",\r\n//   messagingSenderId: \"640850592368\",\r\n//   appId: \"1:640850592368:web:506c6d7cc202fbe91eaab5\"\r\n// };\r\n\r\n// // Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}